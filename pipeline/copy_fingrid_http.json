{
	"name": "copy_fingrid_http",
	"properties": {
		"activities": [
			{
				"name": "Copy from fingrid",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set end time in findgrid api",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "HttpReadSettings",
							"requestMethod": "GET",
							"additionalHeaders": "x-api-key:8f918aee12eb40e896d4eb74267562fc",
							"requestTimeout": ""
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "ds_fingrid",
						"type": "DatasetReference",
						"parameters": {
							"startTime": {
								"value": "@pipeline().parameters.start_time",
								"type": "Expression"
							},
							"endTime": {
								"value": "@variables('end_time')",
								"type": "Expression"
							},
							"pageSize": {
								"value": "@pipeline().parameters.page_size",
								"type": "Expression"
							},
							"source_dataset_id": {
								"value": "@pipeline().parameters.source_dataset_id",
								"type": "Expression"
							},
							"page": {
								"value": "@variables('current_page')",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "ds_sink_dl",
						"type": "DatasetReference",
						"parameters": {
							"target_container": {
								"value": "@pipeline().parameters.target_container",
								"type": "Expression"
							},
							"target_folder": {
								"value": "@pipeline().parameters.target_folder",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Set total page in this run",
				"description": "",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup total page in this run",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "total_page",
					"value": {
						"value": "@activity('Lookup total page in this run').output.value[0].pagination.lastPage",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Lookup total page in this run",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "ForEach each file name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "lookup_page_file_lastmodified",
						"type": "DatasetReference",
						"parameters": {
							"target_container": {
								"value": "@pipeline().parameters.target_container",
								"type": "Expression"
							},
							"target_folder": {
								"value": "@pipeline().parameters.target_folder",
								"type": "Expression"
							},
							"target_file": {
								"value": "@variables('last_modified_file_name')",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Get all file names",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Copy from fingrid",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "lookup_page_allfiles",
						"type": "DatasetReference",
						"parameters": {
							"target_container": {
								"value": "@pipeline().parameters.target_container",
								"type": "Expression"
							},
							"target_folder": {
								"value": "@pipeline().parameters.target_folder",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "JsonReadSettings"
					}
				}
			},
			{
				"name": "ForEach each file name",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get all file names",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get all file names').output.childItems",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Get file lastModified",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "lookup_page_file_lastmodified",
									"type": "DatasetReference",
									"parameters": {
										"target_container": {
											"value": "@pipeline().parameters.target_container",
											"type": "Expression"
										},
										"target_folder": {
											"value": "@pipeline().parameters.target_folder",
											"type": "Expression"
										},
										"target_file": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"lastModified",
									"itemName"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							}
						},
						{
							"name": "If Condition store the last modified time and file",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get file lastModified",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greaterOrEquals(activity('Get file lastModified').output.lastModified, variables('last_modified_time'))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Set variable last modified time",
										"type": "SetVariable",
										"dependsOn": [],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "last_modified_time",
											"value": {
												"value": "@activity('Get file lastModified').output.lastModified",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set variable last modified file name",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Set variable last modified time",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "last_modified_file_name",
											"value": {
												"value": "@activity('Get file lastModified').output.itemName",
												"type": "Expression"
											}
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Until total page",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Set total page in this run",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greaterOrEquals(variables('current_page'), variables('total_page'))",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Copy from fingrid_copy1",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Set current_page",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "HttpReadSettings",
										"requestMethod": "GET",
										"additionalHeaders": "x-api-key:8f918aee12eb40e896d4eb74267562fc",
										"requestTimeout": ""
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "ds_fingrid",
									"type": "DatasetReference",
									"parameters": {
										"startTime": {
											"value": "@pipeline().parameters.start_time",
											"type": "Expression"
										},
										"endTime": {
											"value": "@variables('end_time')",
											"type": "Expression"
										},
										"pageSize": {
											"value": "@pipeline().parameters.page_size",
											"type": "Expression"
										},
										"source_dataset_id": {
											"value": "@pipeline().parameters.source_dataset_id",
											"type": "Expression"
										},
										"page": {
											"value": "@variables('current_page')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_sink_dl",
									"type": "DatasetReference",
									"parameters": {
										"target_container": {
											"value": "@pipeline().parameters.target_container",
											"type": "Expression"
										},
										"target_folder": {
											"value": "@pipeline().parameters.target_folder",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Set current_page",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set tem_page",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "current_page",
								"value": {
									"value": "@variables('tem_page')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set tem_page",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "tem_page",
								"value": {
									"value": "@add(variables('current_page'),1)",
									"type": "Expression"
								}
							}
						}
					],
					"timeout": "0.12:00:00"
				}
			},
			{
				"name": "Set end time in findgrid api",
				"description": "as current datetime",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "end_time",
					"value": {
						"value": "@formatDateTime(utcNow(), 'yyyy-MM-ddTHH:mm:ss.fffZ')\n",
						"type": "Expression"
					}
				}
			},
			{
				"name": "update last refresh timestamp",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "Until total page",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Users/ethan.nie2023@gmail.com/update last refresh timestamp/update last_timestamp",
					"baseParameters": {
						"end_time": {
							"value": "@variables('end_time')",
							"type": "Expression"
						},
						"dataset_source_id": {
							"value": "@pipeline().parameters.source_dataset_id",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureDatabricks1",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"source_dataset_id": {
				"type": "string"
			},
			"start_time": {
				"type": "string"
			},
			"target_container": {
				"type": "string"
			},
			"target_folder": {
				"type": "string"
			},
			"page_size": {
				"type": "string"
			}
		},
		"variables": {
			"total_page": {
				"type": "Integer"
			},
			"file_name_array": {
				"type": "Array"
			},
			"last_modified_time": {
				"type": "String",
				"defaultValue": "2025-01-01T00:00:00Z"
			},
			"last_modified_file_name": {
				"type": "String"
			},
			"end_time": {
				"type": "String"
			},
			"current_page": {
				"type": "Integer",
				"defaultValue": 1
			},
			"tem_page": {
				"type": "Integer",
				"defaultValue": 1
			}
		},
		"annotations": [],
		"lastPublishTime": "2025-05-17T06:21:07Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}